{"version":3,"sources":["types/FilterTypes.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["FilterTypes","actions","todo","type","payload","currentTodoReducer","state","action","startValue","query","status","filterReducer","SET_TODOS","todosReducer","rootReducer","combineReducers","currentTodo","filter","todos","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","list","useCallback","completed","selectList","l","title","toLowerCase","includes","filterList","className","map","id","classNames","onClick","onButtonClick","TodoFilter","setFilterType","filterActions","setQuery","onSubmit","event","preventDefault","value","onChange","target","All","Active","Completed","placeholder","length","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","selectedTodo","useState","hasError","sethasError","currentUser","setCurrentUser","name","email","useEffect","userId","user","catch","href","App","isLoading","setIsLoading","apiTodos","setTodos","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2ae4b564.chunk.js","sourcesContent":["export enum FilterTypes {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetFilter = { type: 'setFilter', payload: Status };\n\ntype SetQuery = { type: 'setQuery', payload: string };\n\ntype StateFilter = { query: string, status: Status };\n\ntype Action = SetFilter | SetQuery;\n\nconst setFilterType = (status: Status) => (\n  { type: 'setFilter', payload: status }\n);\n\nconst setQuery = (query: string) => (\n  { type: 'setQuery', payload: query }\n);\n\nconst startValue: StateFilter = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (\n  state: StateFilter = startValue,\n  action: Action,\n): StateFilter => {\n  switch (action.type) {\n    case 'setFilter':\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    case 'setQuery':\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\nexport const actions = { setQuery, setFilterType };\n","import { Todo } from '../types/Todo';\n\nconst SET_TODOS = 'setTodos';\n\ntype SetTodos = { type: 'setTodos', payload: Todo[] };\n\nexport const setTodos = (todos: Todo[]) => (\n  { type: SET_TODOS, payload: todos }\n);\n\nconst todosReducer = (\n  state: Todo[] = [],\n  action: SetTodos,\n): Todo[] => {\n  switch (action.type) {\n    case SET_TODOS:\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { useCallback } from 'react';\nimport classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { actions } from '../../features/currentTodo';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { todos, currentTodo, filter } = useAppSelector(state => state);\n  const { query, status } = filter;\n\n  const onButtonClick = (todo: Todo) => {\n    dispatch(actions.setTodo(todo));\n  };\n\n  const selectList = () => {\n    switch (status) {\n      case 'active':\n        return todos.filter(todo => todo.completed === false);\n\n      case 'completed':\n        return todos.filter(todo => todo.completed === true);\n\n      default:\n        return todos;\n    }\n  };\n\n  const filterList = useCallback(() => {\n    return selectList().filter(l => {\n      return l.title.toLowerCase().includes(query);\n    });\n  }, [query]);\n\n  const list = filterList();\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {list.map(todo => (\n          <tr\n            data-cy=\"todo\"\n            key={todo.id}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={classNames(todo.completed\n                  ? 'has-text-success'\n                  : 'has-text-danger')}\n              >\n                {todo.title}\n              </p>\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => onButtonClick(todo)}\n              >\n                <span className=\"icon\">\n                  <i\n                    className={classNames(\n                      'far',\n                      { 'fa-eye': todo.id !== currentTodo?.id },\n                      { 'fa-eye-slash': todo.id === currentTodo?.id },\n                    )}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\nimport { FilterTypes } from '../../types/FilterTypes';\n\nexport const TodoFilter: React.FC = () => {\n  const { query, status } = useAppSelector(state => state.filter);\n  const dispatch = useDispatch();\n  const { setFilterType, setQuery } = filterActions;\n\n  const handleSelect: React.ChangeEventHandler<HTMLSelectElement> = (\n    event: React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    dispatch(setFilterType(event.target.value as Status));\n  };\n\n  const clearInput = () => {\n    dispatch(setQuery(''));\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(setQuery(event.target.value));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleSelect}\n          >\n            <option value={FilterTypes.All}>All</option>\n            <option value={FilterTypes.Active}>Active</option>\n            <option value={FilterTypes.Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {!!query.length && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              aria-label=\"cleaner\"\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={clearInput}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { useAppDispatch } from '../../app/hooks';\nimport { getUser } from '../../api';\nimport { actions } from '../../features/currentTodo';\n\ntype Props = {\n  selectedTodo: Todo,\n};\n\nexport const TodoModal: React.FC<Props> = ({ selectedTodo }) => {\n  const [hasError, sethasError] = useState(false);\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const dispatch = useAppDispatch();\n  const { id, title, completed } = selectedTodo;\n  const { name, email } = currentUser || {};\n\n  useEffect(() => {\n    if (selectedTodo) {\n      getUser(selectedTodo.userId)\n        .then(user => setCurrentUser(user))\n        .catch(() => sethasError(true));\n    }\n  }, [selectedTodo]);\n\n  const onButtonClick = () => {\n    dispatch(actions.removeTodo());\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {hasError && (\n        <p className=\"notification is-warning\">\n          Oops... Something went wrong.\n        </p>\n      )}\n\n      {!currentUser ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {id}\n            </div>\n            <button\n              aria-label=\"modal-close\"\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onButtonClick}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n              {' by '}\n              <a\n                href={`mailto:${email}`}\n              >\n                {name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { useDispatch } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { setTodos } from './features/todos';\n\nexport const App: React.FC = () => {\n  const dispatch = useDispatch();\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const todos = useAppSelector(state => state.todos);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    getTodos()\n      .then(apiTodos => {\n        dispatch(setTodos(apiTodos));\n        setIsLoading(true);\n      })\n      .catch(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {todos.length > 0 && isLoading\n                ? <TodoList />\n                : <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal selectedTodo={selectedTodo} />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}